<?php
include '/opt/lampp/htdocs/CLASSIFICACAO/app/config/conexao.php';

function classificarOitavasDeFinal() {
    global $conn;

    // Obter a configuração da fase final
    $result = $conn->query("SELECT fase_final, numero_grupos FROM configuracoes WHERE id = 1");
    $config = $result->fetch_assoc();
    $faseFinal = $config['fase_final'];
    $numeroGrupos = (int) $config['numero_grupos'];

    // Verificar se a fase final é 'quartas'
    if ($faseFinal == 'quartas') {
        classificarQuartasDeFinal();
        return;
    }

    $num_oitavas = 16; // Número esperado de times para oitavas de final

    // Verificar se o número de grupos é válido
    if ($numeroGrupos <= 0) {
        die("Número de grupos inválido.");
    }

    // Calcular a quantidade de times por grupo que deve ser classificada
    $times_por_grupo = intdiv($num_oitavas, $numeroGrupos);

    if ($times_por_grupo < 1) {
        die("Número de times classificados insuficiente para iniciar as oitavas de final.");
    }

    // Limpar a tabela de oitavas de final e confrontos
    $conn->query("TRUNCATE TABLE oitavas_de_final");
    $conn->query("TRUNCATE TABLE oitavas_de_final_confrontos");

    $times_classificados = [];

    // Obter times classificados de cada grupo
    for ($i = 1; $i <= $numeroGrupos; $i++) {
        $result = $conn->query("SELECT * FROM times WHERE grupo_id = $i ORDER BY pts DESC, sg DESC, gm DESC LIMIT $times_por_grupo");
        while ($row = $result->fetch_assoc()) {
            $times_classificados[$i][] = $row;
        }
    }

    // Verificar se temos exatamente 16 times classificados
    $total_times_classificados = array_reduce($times_classificados, function($carry, $group) {
        return $carry + count($group);
    }, 0);

    if ($total_times_classificados != $num_oitavas) {
        die("Erro na classificação dos times para as oitavas de final.");
    }

    // Organizar os confrontos das oitavas de final
    $confrontos = [];
    $num_confrontos = $num_oitavas / 2;

    for ($i = 1; $i <= $numeroGrupos / 2; $i++) {
        $grupoA = $i;
        $grupoB = $i + $numeroGrupos / 2;

        // Ordenar times de cada grupo
        $timesGrupoA = $times_classificados[$grupoA];
        $timesGrupoB = $times_classificados[$grupoB];

        // Criar confrontos entre os times dos grupos
        for ($j = 0; $j < count($timesGrupoA); $j++) {
            if ($j >= count($timesGrupoB)) break; // Evitar acesso fora dos limites
            $timeA = $timesGrupoA[$j];
            $timeB = $timesGrupoB[count($timesGrupoB) - 1 - $j]; // Últimos times de B

            $confrontos[] = [
                'timeA' => $timeA,
                'timeB' => $timeB
            ];
        }
    }

    // Inserir os confrontos das oitavas de final
    foreach ($confrontos as $confronto) {
        $timeA = $confronto['timeA'];
        $timeB = $confronto['timeB'];

        // Inserir os times classificados para as oitavas de final
        $stmt = $conn->prepare("INSERT INTO oitavas_de_final (time_id, grupo_nome, time_nome) VALUES (?, ?, ?)");
        $stmt->bind_param("iss", $timeA['id'], $timeA['grupo_id'], $timeA['nome']);
        $stmt->execute();
        $stmt->bind_param("iss", $timeB['id'], $timeB['grupo_id'], $timeB['nome']);
        $stmt->execute();
        $stmt->close();

        // Inserir os confrontos das oitavas de final
        $stmt = $conn->prepare("INSERT INTO oitavas_de_final_confrontos (timeA_nome, timeB_nome, fase) VALUES (?, ?, 'oitavas')");
        $stmt->bind_param("ss", $timeA['nome'], $timeB['nome']);
        $stmt->execute();
        $stmt->close();
    }
}

function classificarQuartasDeFinal() {
    global $conn;

    // Limpar a tabela de quartas de final e confrontos
    $conn->query("TRUNCATE TABLE quartas_de_final");
    $conn->query("TRUNCATE TABLE quartas_de_final_confrontos");

    // Verificar se a fase final é 'quartas'
    $faseFinal = obterFaseFinal();
    if ($faseFinal == 'quartas') {
        // Chamar a função classificarQuartasDeFinal se a fase final for 'quartas'
        $temConfrontosOitavas = verificarConfrontosOitavas();
        if ($temConfrontosOitavas) {
            classificarQuartasPorConfrontosOitavas();
        } else {
            classificarQuartasPorFaseDeGrupos();
        }
        return;
    }
}

function obterFaseFinal() {
    global $conn;
    $stmt = $conn->prepare("SELECT fase_final FROM configuracoes LIMIT 1");
    $stmt->execute();
    $stmt->bind_result($fase_final);
    $stmt->fetch();
    $stmt->close();
    return $fase_final;
}

function verificarConfrontosOitavas() {
    global $conn;
    $result = $conn->query("SELECT COUNT(*) FROM oitavas_de_final_confrontos");
    $row = $result->fetch_row();
    return $row[0] > 0; // Retorna true se houver confrontos de oitavas
}

function classificarQuartasPorConfrontosOitavas() {
    global $conn;

    // Obter os confrontos das oitavas de final com os resultados dos jogos
    $result = $conn->query("SELECT * FROM oitavas_de_final_confrontos");
    $timesGols = [];

    while ($row = $result->fetch_assoc()) {
        $timeA_nome = $row['timeA_nome'];
        $timeB_nome = $row['timeB_nome'];

        // Obter gols marcados por cada time
        $timeA_gols = obterGolsMarcados($timeA_nome);
        $timeB_gols = obterGolsMarcados($timeB_nome);

        // Adicionar resultados para classificação
        $timesGols[$timeA_nome] = $timeA_gols;
        $timesGols[$timeB_nome] = $timeB_gols;
    }

    // Ordenar os times baseando-se na quantidade de gols marcados
    arsort($timesGols); // Ordenar em ordem decrescente

    // Obter os 8 melhores times
    $timesClassificados = array_slice(array_keys($timesGols), 0, 8);

    // Inserir os times classificados na tabela de quartas de final
    foreach ($timesClassificados as $time_nome) {
        $stmt = $conn->prepare("INSERT INTO quartas_de_final (time_nome) VALUES (?)");
        $stmt->bind_param("s", $time_nome);
        $stmt->execute();
        $stmt->close();
    }

    // Organizar os confrontos das quartas de final
    organizarConfrontosQuartas($timesClassificados);
}

function classificarQuartasPorFaseDeGrupos() {
    global $conn;

    // Obter a quantidade de grupos e calcular a quantidade de times por grupo para oitavas
    $numGrupos = obterNumeroDeGrupos();
    $timesPorGrupo = 8 / $numGrupos; // Ajustar se necessário

    // Obter os times classificados de cada grupo
    $timesClassificados = [];
    for ($i = 1; $i <= $numGrupos; $i++) {
        $result = $conn->query("SELECT nome FROM times WHERE grupo_id = $i ORDER BY pontos DESC LIMIT $timesPorGrupo");
        while ($row = $result->fetch_assoc()) {
            $timesClassificados[] = $row['nome'];
        }
    }

    // Inserir os times classificados na tabela de quartas de final
    foreach ($timesClassificados as $time_nome) {
        $stmt = $conn->prepare("INSERT INTO quartas_de_final (time_nome) VALUES (?)");
        $stmt->bind_param("s", $time_nome);
        $stmt->execute();
        $stmt->close();
    }

    // Organizar os confrontos das quartas de final
    organizarConfrontosQuartas($timesClassificados);
}

function obterNumeroDeGrupos() {
    global $conn;
    $result = $conn->query("SELECT numero_grupos FROM configuracoes LIMIT 1");
    $row = $result->fetch_assoc();
    return (int) $row['numero_grupos'];
}

function obterGolsMarcados($time_nome) {
    global $conn;
    $stmt = $conn->prepare("SELECT SUM(gols_marcados) FROM jogos WHERE time_nome = ?");
    $stmt->bind_param("s", $time_nome);
    $stmt->execute();
    $stmt->bind_result($gols_marcados);
    $stmt->fetch();
    $stmt->close();
    return $gols_marcados;
}

function organizarConfrontosQuartas($timesClassificados) {
    global $conn;
    $numConfrontos = count($timesClassificados) / 2;
    $confrontos = [];

    for ($i = 0; $i < $numConfrontos; $i++) {
        $timeA = $timesClassificados[$i];
        $timeB = $timesClassificados[$numConfrontos + $i];

        $confrontos[] = [
            'timeA' => $timeA,
            'timeB' => $timeB
        ];
    }

    // Inserir os confrontos das quartas de final
    foreach ($confrontos as $confronto) {
        $stmt = $conn->prepare("INSERT INTO quartas_de_final_confrontos (timeA_nome, timeB_nome, fase) VALUES (?, ?, 'quartas')");
        $stmt->bind_param("ss", $confronto['timeA'], $confronto['timeB']);
        $stmt->execute();
        $stmt->close();
    }
}

// Chamar a função para classificar oitavas ou quartas conforme necessário
classificarOitavasDeFinal();
?>




-- SET SQL_SAFE_UPDATES = 0;
-- DELETE FROM fase_execucao WHERE id > 0;

--  UPDATE configuracoes SET fase_final = 'quartas' WHERE id = "1";
